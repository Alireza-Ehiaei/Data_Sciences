{
 "cells": [
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Reading huge files"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Method 1 \n",
    "\n",
    "Using readlines to have an overview of the file by knowing how many rows it has, and\n",
    "read and work with only rows or columns needed which needs less memory"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Creating an iterator, which reads the metadata attached to the .dta file, \n",
    "but importantly doesn't read the data itself yet.\n",
    "Reference: https://kylebarron.dev/blog/reading-stata-files-with-python"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 193,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Exact number of rows: 2279873\n",
      "Wall time: 20.6 s\n"
     ]
    }
   ],
   "source": [
    "%%time\n",
    "with open(r\"C:\\Users\\IMBS\\Downloads\\programming\\Atlas-Harward\\country_hsproduct6digit_year.dta\", errors=\"ignore\") as file:\n",
    "    n_rows = len(file.readlines())\n",
    "\n",
    "print ('Exact number of rows: {}'.format(n_rows))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 194,
   "metadata": {},
   "outputs": [],
   "source": [
    "itr = pd.read_stata(r\"C:\\Users\\IMBS\\Downloads\\programming\\Atlas-Harward\\country_hsproduct6digit_year.dta\", iterator = True)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 195,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>location_id</th>\n",
       "      <th>product_id</th>\n",
       "      <th>year</th>\n",
       "      <th>export_value</th>\n",
       "      <th>import_value</th>\n",
       "      <th>hs_eci</th>\n",
       "      <th>hs_coi</th>\n",
       "      <th>location_code</th>\n",
       "      <th>hs_product_code</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>0</td>\n",
       "      <td>5000</td>\n",
       "      <td>1995</td>\n",
       "      <td>18008.0</td>\n",
       "      <td>7199.0</td>\n",
       "      <td>-0.468138</td>\n",
       "      <td>-0.696617</td>\n",
       "      <td>ABW</td>\n",
       "      <td>010111</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>0</td>\n",
       "      <td>5000</td>\n",
       "      <td>1996</td>\n",
       "      <td>0.0</td>\n",
       "      <td>3020.0</td>\n",
       "      <td>-0.663710</td>\n",
       "      <td>-0.704456</td>\n",
       "      <td>ABW</td>\n",
       "      <td>010111</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>0</td>\n",
       "      <td>5000</td>\n",
       "      <td>1997</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>-1.194294</td>\n",
       "      <td>-0.818992</td>\n",
       "      <td>ABW</td>\n",
       "      <td>010111</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>0</td>\n",
       "      <td>5000</td>\n",
       "      <td>1998</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>0.199708</td>\n",
       "      <td>-0.704800</td>\n",
       "      <td>ABW</td>\n",
       "      <td>010111</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>0</td>\n",
       "      <td>5000</td>\n",
       "      <td>1999</td>\n",
       "      <td>14510.0</td>\n",
       "      <td>46679.0</td>\n",
       "      <td>-0.083034</td>\n",
       "      <td>-0.801171</td>\n",
       "      <td>ABW</td>\n",
       "      <td>010111</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "   location_id  product_id  year  export_value  import_value    hs_eci  \\\n",
       "0            0        5000  1995       18008.0        7199.0 -0.468138   \n",
       "1            0        5000  1996           0.0        3020.0 -0.663710   \n",
       "2            0        5000  1997           NaN           NaN -1.194294   \n",
       "3            0        5000  1998           NaN           NaN  0.199708   \n",
       "4            0        5000  1999       14510.0       46679.0 -0.083034   \n",
       "\n",
       "     hs_coi location_code hs_product_code  \n",
       "0 -0.696617           ABW          010111  \n",
       "1 -0.704456           ABW          010111  \n",
       "2 -0.818992           ABW          010111  \n",
       "3 -0.704800           ABW          010111  \n",
       "4 -0.801171           ABW          010111  "
      ]
     },
     "execution_count": 195,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# Now it's possible to read in just a chunk of the data at a time.\n",
    "auto = itr.get_chunk(5)\n",
    "auto"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 196,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>location_id</th>\n",
       "      <th>product_id</th>\n",
       "      <th>year</th>\n",
       "      <th>export_value</th>\n",
       "      <th>import_value</th>\n",
       "      <th>hs_eci</th>\n",
       "      <th>hs_coi</th>\n",
       "      <th>location_code</th>\n",
       "      <th>hs_product_code</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>0</td>\n",
       "      <td>5000</td>\n",
       "      <td>1995</td>\n",
       "      <td>18008.0</td>\n",
       "      <td>7199.0</td>\n",
       "      <td>-0.468138</td>\n",
       "      <td>-0.696617</td>\n",
       "      <td>ABW</td>\n",
       "      <td>010111</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>0</td>\n",
       "      <td>5000</td>\n",
       "      <td>1996</td>\n",
       "      <td>0.0</td>\n",
       "      <td>3020.0</td>\n",
       "      <td>-0.663710</td>\n",
       "      <td>-0.704456</td>\n",
       "      <td>ABW</td>\n",
       "      <td>010111</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>0</td>\n",
       "      <td>5000</td>\n",
       "      <td>1997</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>-1.194294</td>\n",
       "      <td>-0.818992</td>\n",
       "      <td>ABW</td>\n",
       "      <td>010111</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>0</td>\n",
       "      <td>5000</td>\n",
       "      <td>1998</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>0.199708</td>\n",
       "      <td>-0.704800</td>\n",
       "      <td>ABW</td>\n",
       "      <td>010111</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>0</td>\n",
       "      <td>5000</td>\n",
       "      <td>1999</td>\n",
       "      <td>14510.0</td>\n",
       "      <td>46679.0</td>\n",
       "      <td>-0.083034</td>\n",
       "      <td>-0.801171</td>\n",
       "      <td>ABW</td>\n",
       "      <td>010111</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>5</th>\n",
       "      <td>0</td>\n",
       "      <td>5000</td>\n",
       "      <td>2000</td>\n",
       "      <td>0.0</td>\n",
       "      <td>18778.0</td>\n",
       "      <td>0.349085</td>\n",
       "      <td>-0.777499</td>\n",
       "      <td>ABW</td>\n",
       "      <td>010111</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>6</th>\n",
       "      <td>0</td>\n",
       "      <td>5000</td>\n",
       "      <td>2001</td>\n",
       "      <td>10544.0</td>\n",
       "      <td>19844.0</td>\n",
       "      <td>-0.104944</td>\n",
       "      <td>-0.835741</td>\n",
       "      <td>ABW</td>\n",
       "      <td>010111</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>7</th>\n",
       "      <td>0</td>\n",
       "      <td>5000</td>\n",
       "      <td>2002</td>\n",
       "      <td>9013.0</td>\n",
       "      <td>14996.0</td>\n",
       "      <td>0.036983</td>\n",
       "      <td>-0.817704</td>\n",
       "      <td>ABW</td>\n",
       "      <td>010111</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>8</th>\n",
       "      <td>0</td>\n",
       "      <td>5000</td>\n",
       "      <td>2003</td>\n",
       "      <td>8485.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>-0.111908</td>\n",
       "      <td>-0.779524</td>\n",
       "      <td>ABW</td>\n",
       "      <td>010111</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>9</th>\n",
       "      <td>0</td>\n",
       "      <td>5000</td>\n",
       "      <td>2004</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>-0.318405</td>\n",
       "      <td>-0.851311</td>\n",
       "      <td>ABW</td>\n",
       "      <td>010111</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>10</th>\n",
       "      <td>0</td>\n",
       "      <td>5000</td>\n",
       "      <td>2005</td>\n",
       "      <td>7199.0</td>\n",
       "      <td>13090.0</td>\n",
       "      <td>0.418218</td>\n",
       "      <td>-0.690813</td>\n",
       "      <td>ABW</td>\n",
       "      <td>010111</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>11</th>\n",
       "      <td>0</td>\n",
       "      <td>5000</td>\n",
       "      <td>2006</td>\n",
       "      <td>26667.0</td>\n",
       "      <td>23189.0</td>\n",
       "      <td>0.126670</td>\n",
       "      <td>-0.741866</td>\n",
       "      <td>ABW</td>\n",
       "      <td>010111</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>12</th>\n",
       "      <td>0</td>\n",
       "      <td>5000</td>\n",
       "      <td>2007</td>\n",
       "      <td>23763.0</td>\n",
       "      <td>860.0</td>\n",
       "      <td>-0.104765</td>\n",
       "      <td>-0.763107</td>\n",
       "      <td>ABW</td>\n",
       "      <td>010111</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>13</th>\n",
       "      <td>0</td>\n",
       "      <td>5000</td>\n",
       "      <td>2008</td>\n",
       "      <td>4417.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>-0.106911</td>\n",
       "      <td>-0.747917</td>\n",
       "      <td>ABW</td>\n",
       "      <td>010111</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>14</th>\n",
       "      <td>0</td>\n",
       "      <td>5000</td>\n",
       "      <td>2009</td>\n",
       "      <td>2243.0</td>\n",
       "      <td>10066.0</td>\n",
       "      <td>0.736107</td>\n",
       "      <td>-0.703606</td>\n",
       "      <td>ABW</td>\n",
       "      <td>010111</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>15</th>\n",
       "      <td>0</td>\n",
       "      <td>5000</td>\n",
       "      <td>2010</td>\n",
       "      <td>0.0</td>\n",
       "      <td>10530.0</td>\n",
       "      <td>1.015212</td>\n",
       "      <td>0.090228</td>\n",
       "      <td>ABW</td>\n",
       "      <td>010111</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>16</th>\n",
       "      <td>0</td>\n",
       "      <td>5000</td>\n",
       "      <td>2011</td>\n",
       "      <td>0.0</td>\n",
       "      <td>9568.0</td>\n",
       "      <td>-0.283607</td>\n",
       "      <td>-0.684492</td>\n",
       "      <td>ABW</td>\n",
       "      <td>010111</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>17</th>\n",
       "      <td>0</td>\n",
       "      <td>5000</td>\n",
       "      <td>2012</td>\n",
       "      <td>42619.0</td>\n",
       "      <td>26140.0</td>\n",
       "      <td>0.272379</td>\n",
       "      <td>-0.493576</td>\n",
       "      <td>ABW</td>\n",
       "      <td>010111</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>18</th>\n",
       "      <td>0</td>\n",
       "      <td>5000</td>\n",
       "      <td>2013</td>\n",
       "      <td>8469.0</td>\n",
       "      <td>96183.0</td>\n",
       "      <td>0.887678</td>\n",
       "      <td>-0.116285</td>\n",
       "      <td>ABW</td>\n",
       "      <td>010111</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>19</th>\n",
       "      <td>0</td>\n",
       "      <td>5000</td>\n",
       "      <td>2014</td>\n",
       "      <td>5005.0</td>\n",
       "      <td>7170.0</td>\n",
       "      <td>0.817055</td>\n",
       "      <td>-0.292990</td>\n",
       "      <td>ABW</td>\n",
       "      <td>010111</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>20</th>\n",
       "      <td>0</td>\n",
       "      <td>5000</td>\n",
       "      <td>2015</td>\n",
       "      <td>0.0</td>\n",
       "      <td>13720.0</td>\n",
       "      <td>0.786367</td>\n",
       "      <td>-0.002074</td>\n",
       "      <td>ABW</td>\n",
       "      <td>010111</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>21</th>\n",
       "      <td>0</td>\n",
       "      <td>5000</td>\n",
       "      <td>2016</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>0.937783</td>\n",
       "      <td>0.277835</td>\n",
       "      <td>ABW</td>\n",
       "      <td>010111</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>22</th>\n",
       "      <td>0</td>\n",
       "      <td>5000</td>\n",
       "      <td>2017</td>\n",
       "      <td>6161.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.855724</td>\n",
       "      <td>0.148086</td>\n",
       "      <td>ABW</td>\n",
       "      <td>010111</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>23</th>\n",
       "      <td>0</td>\n",
       "      <td>5000</td>\n",
       "      <td>2018</td>\n",
       "      <td>12386.0</td>\n",
       "      <td>10671.0</td>\n",
       "      <td>0.916250</td>\n",
       "      <td>-0.199710</td>\n",
       "      <td>ABW</td>\n",
       "      <td>010111</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>24</th>\n",
       "      <td>1</td>\n",
       "      <td>5000</td>\n",
       "      <td>1995</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>-0.356438</td>\n",
       "      <td>-0.624099</td>\n",
       "      <td>AFG</td>\n",
       "      <td>010111</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>25</th>\n",
       "      <td>1</td>\n",
       "      <td>5000</td>\n",
       "      <td>1996</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>-0.366837</td>\n",
       "      <td>-0.628291</td>\n",
       "      <td>AFG</td>\n",
       "      <td>010111</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>26</th>\n",
       "      <td>1</td>\n",
       "      <td>5000</td>\n",
       "      <td>1997</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>0.029130</td>\n",
       "      <td>-0.354135</td>\n",
       "      <td>AFG</td>\n",
       "      <td>010111</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>27</th>\n",
       "      <td>1</td>\n",
       "      <td>5000</td>\n",
       "      <td>1998</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>-0.300252</td>\n",
       "      <td>-0.682999</td>\n",
       "      <td>AFG</td>\n",
       "      <td>010111</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>28</th>\n",
       "      <td>1</td>\n",
       "      <td>5000</td>\n",
       "      <td>1999</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>-0.222644</td>\n",
       "      <td>-0.640159</td>\n",
       "      <td>AFG</td>\n",
       "      <td>010111</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>29</th>\n",
       "      <td>1</td>\n",
       "      <td>5000</td>\n",
       "      <td>2000</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>-0.241993</td>\n",
       "      <td>-0.554850</td>\n",
       "      <td>AFG</td>\n",
       "      <td>010111</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "    location_id  product_id  year  export_value  import_value    hs_eci  \\\n",
       "0             0        5000  1995       18008.0        7199.0 -0.468138   \n",
       "1             0        5000  1996           0.0        3020.0 -0.663710   \n",
       "2             0        5000  1997           NaN           NaN -1.194294   \n",
       "3             0        5000  1998           NaN           NaN  0.199708   \n",
       "4             0        5000  1999       14510.0       46679.0 -0.083034   \n",
       "5             0        5000  2000           0.0       18778.0  0.349085   \n",
       "6             0        5000  2001       10544.0       19844.0 -0.104944   \n",
       "7             0        5000  2002        9013.0       14996.0  0.036983   \n",
       "8             0        5000  2003        8485.0           0.0 -0.111908   \n",
       "9             0        5000  2004           NaN           NaN -0.318405   \n",
       "10            0        5000  2005        7199.0       13090.0  0.418218   \n",
       "11            0        5000  2006       26667.0       23189.0  0.126670   \n",
       "12            0        5000  2007       23763.0         860.0 -0.104765   \n",
       "13            0        5000  2008        4417.0           0.0 -0.106911   \n",
       "14            0        5000  2009        2243.0       10066.0  0.736107   \n",
       "15            0        5000  2010           0.0       10530.0  1.015212   \n",
       "16            0        5000  2011           0.0        9568.0 -0.283607   \n",
       "17            0        5000  2012       42619.0       26140.0  0.272379   \n",
       "18            0        5000  2013        8469.0       96183.0  0.887678   \n",
       "19            0        5000  2014        5005.0        7170.0  0.817055   \n",
       "20            0        5000  2015           0.0       13720.0  0.786367   \n",
       "21            0        5000  2016           NaN           NaN  0.937783   \n",
       "22            0        5000  2017        6161.0           0.0  0.855724   \n",
       "23            0        5000  2018       12386.0       10671.0  0.916250   \n",
       "24            1        5000  1995           NaN           NaN -0.356438   \n",
       "25            1        5000  1996           NaN           NaN -0.366837   \n",
       "26            1        5000  1997           NaN           NaN  0.029130   \n",
       "27            1        5000  1998           NaN           NaN -0.300252   \n",
       "28            1        5000  1999           NaN           NaN -0.222644   \n",
       "29            1        5000  2000           NaN           NaN -0.241993   \n",
       "\n",
       "      hs_coi location_code hs_product_code  \n",
       "0  -0.696617           ABW          010111  \n",
       "1  -0.704456           ABW          010111  \n",
       "2  -0.818992           ABW          010111  \n",
       "3  -0.704800           ABW          010111  \n",
       "4  -0.801171           ABW          010111  \n",
       "5  -0.777499           ABW          010111  \n",
       "6  -0.835741           ABW          010111  \n",
       "7  -0.817704           ABW          010111  \n",
       "8  -0.779524           ABW          010111  \n",
       "9  -0.851311           ABW          010111  \n",
       "10 -0.690813           ABW          010111  \n",
       "11 -0.741866           ABW          010111  \n",
       "12 -0.763107           ABW          010111  \n",
       "13 -0.747917           ABW          010111  \n",
       "14 -0.703606           ABW          010111  \n",
       "15  0.090228           ABW          010111  \n",
       "16 -0.684492           ABW          010111  \n",
       "17 -0.493576           ABW          010111  \n",
       "18 -0.116285           ABW          010111  \n",
       "19 -0.292990           ABW          010111  \n",
       "20 -0.002074           ABW          010111  \n",
       "21  0.277835           ABW          010111  \n",
       "22  0.148086           ABW          010111  \n",
       "23 -0.199710           ABW          010111  \n",
       "24 -0.624099           AFG          010111  \n",
       "25 -0.628291           AFG          010111  \n",
       "26 -0.354135           AFG          010111  \n",
       "27 -0.682999           AFG          010111  \n",
       "28 -0.640159           AFG          010111  \n",
       "29 -0.554850           AFG          010111  "
      ]
     },
     "execution_count": 196,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# We can also easily loop over the data like so:\n",
    "\n",
    "itr = pd.read_stata(r\"C:\\Users\\IMBS\\Downloads\\programming\\Atlas-Harward\\country_hsproduct6digit_year.dta\", iterator = True, chunksize = 10)\n",
    "\n",
    "col4 = pd.DataFrame()\n",
    "for df in itr:\n",
    "    col4 = col4.append(df)\n",
    "    if len(col4.index)==30:\n",
    "        break\n",
    "col4"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "without importing the file, we can get some data at which the data were last saved."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 197,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "''"
      ]
     },
     "execution_count": 197,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "itr.data_label"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 198,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "30385560"
      ]
     },
     "execution_count": 198,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "itr.nobs"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 199,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "9"
      ]
     },
     "execution_count": 199,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "itr.nvar"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 200,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "'18 Jun 2020 16:35'"
      ]
     },
     "execution_count": 200,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "itr.time_stamp"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 201,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "['location_id',\n",
       " 'product_id',\n",
       " 'year',\n",
       " 'export_value',\n",
       " 'import_value',\n",
       " 'hs_eci',\n",
       " 'hs_coi',\n",
       " 'location_code',\n",
       " 'hs_product_code']"
      ]
     },
     "execution_count": 201,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "itr.varlist"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "itr.variable_labels()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "itr.variable_labels() returns a dictionary where the keys of the dictionary are the variable names and the values of the dictionary are the variable labels. So we can access the labels with something like:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 202,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "''"
      ]
     },
     "execution_count": 202,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "labels = itr.variable_labels()\n",
    "\n",
    "# Gets the label of `product_id`\n",
    "labels['product_id']"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 203,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "dict_values(['', '', '', '', '', '', '', '', ''])"
      ]
     },
     "execution_count": 203,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# Gets all keys\n",
    "labels.keys()\n",
    "# Gets all values\n",
    "labels.values()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 204,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "['%12.0g',\n",
       " '%12.0g',\n",
       " '%12.0g',\n",
       " '%10.0g',\n",
       " '%10.0g',\n",
       " '%9.0g',\n",
       " '%9.0g',\n",
       " '%3s',\n",
       " '%11s']"
      ]
     },
     "execution_count": 204,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# showing the display formats the data had used in Stata \n",
    "itr.fmtlist"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 205,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "[numpy.int32,\n",
       " numpy.int32,\n",
       " numpy.int32,\n",
       " numpy.float64,\n",
       " numpy.float64,\n",
       " numpy.float32,\n",
       " numpy.float32,\n",
       " 'a3',\n",
       " 'a11']"
      ]
     },
     "execution_count": 205,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# showing the data types that will be used in Python upon import\n",
    "#we can see that the first column is numpy, and so on\n",
    "itr.dtyplist"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 206,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "[4, 4, 4, 8, 8, 4, 4, 3, 11]"
      ]
     },
     "execution_count": 206,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# the first column takes up 4 bytes for each row, ...\n",
    "itr.col_sizes"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 210,
   "metadata": {
    "scrolled": true
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "'\\nfor itm in itr:\\n    df=df.append(itm)\\n\\ndf_csv.to_csv(\"df1.csv\")'"
      ]
     },
     "execution_count": 210,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# converting all file to csv \n",
    "'''\n",
    "for itm in itr:\n",
    "    df=df.append(itm)\n",
    "\n",
    "df_csv.to_csv(\"df1.csv\")'''"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 208,
   "metadata": {},
   "outputs": [],
   "source": [
    "# converting first 1000 rows of data frame to csv file \n",
    "\n",
    "import pandas as pd\n",
    "itr = pd.read_stata(r\"C:\\Users\\IMBS\\Downloads\\programming\\Atlas-Harward\\country_hsproduct6digit_year.dta\", iterator = True, chunksize = 10)\n",
    "\n",
    "dff = pd.DataFrame()\n",
    "for df in itr:\n",
    "    dff = dff.append(df)\n",
    "    if len(dff.index)==1000: #Takes less time as compared to reading the entire file\n",
    "        break"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 209,
   "metadata": {},
   "outputs": [],
   "source": [
    "dff.to_csv(\"df1.csv\") #the file will be saved in the path of stata file if it is downloaded"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 211,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Wall time: 18 ms\n"
     ]
    },
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Unnamed: 0</th>\n",
       "      <th>location_id</th>\n",
       "      <th>product_id</th>\n",
       "      <th>year</th>\n",
       "      <th>export_value</th>\n",
       "      <th>import_value</th>\n",
       "      <th>hs_eci</th>\n",
       "      <th>hs_coi</th>\n",
       "      <th>location_code</th>\n",
       "      <th>hs_product_code</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>5000</td>\n",
       "      <td>1995</td>\n",
       "      <td>18008.0</td>\n",
       "      <td>7199.0</td>\n",
       "      <td>-0.468138</td>\n",
       "      <td>-0.696617</td>\n",
       "      <td>ABW</td>\n",
       "      <td>10111</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>5000</td>\n",
       "      <td>1996</td>\n",
       "      <td>0.0</td>\n",
       "      <td>3020.0</td>\n",
       "      <td>-0.663710</td>\n",
       "      <td>-0.704456</td>\n",
       "      <td>ABW</td>\n",
       "      <td>10111</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>2</td>\n",
       "      <td>0</td>\n",
       "      <td>5000</td>\n",
       "      <td>1997</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>-1.194294</td>\n",
       "      <td>-0.818992</td>\n",
       "      <td>ABW</td>\n",
       "      <td>10111</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>3</td>\n",
       "      <td>0</td>\n",
       "      <td>5000</td>\n",
       "      <td>1998</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>0.199708</td>\n",
       "      <td>-0.704800</td>\n",
       "      <td>ABW</td>\n",
       "      <td>10111</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>4</td>\n",
       "      <td>0</td>\n",
       "      <td>5000</td>\n",
       "      <td>1999</td>\n",
       "      <td>14510.0</td>\n",
       "      <td>46679.0</td>\n",
       "      <td>-0.083034</td>\n",
       "      <td>-0.801171</td>\n",
       "      <td>ABW</td>\n",
       "      <td>10111</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>...</th>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>995</th>\n",
       "      <td>995</td>\n",
       "      <td>41</td>\n",
       "      <td>5000</td>\n",
       "      <td>2006</td>\n",
       "      <td>1124968.0</td>\n",
       "      <td>2923882.0</td>\n",
       "      <td>2.052127</td>\n",
       "      <td>0.536750</td>\n",
       "      <td>CHE</td>\n",
       "      <td>10111</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>996</th>\n",
       "      <td>996</td>\n",
       "      <td>41</td>\n",
       "      <td>5000</td>\n",
       "      <td>2007</td>\n",
       "      <td>2000409.0</td>\n",
       "      <td>5315366.0</td>\n",
       "      <td>2.017949</td>\n",
       "      <td>0.414810</td>\n",
       "      <td>CHE</td>\n",
       "      <td>10111</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>997</th>\n",
       "      <td>997</td>\n",
       "      <td>41</td>\n",
       "      <td>5000</td>\n",
       "      <td>2008</td>\n",
       "      <td>2379577.0</td>\n",
       "      <td>7030257.0</td>\n",
       "      <td>1.974081</td>\n",
       "      <td>0.368396</td>\n",
       "      <td>CHE</td>\n",
       "      <td>10111</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>998</th>\n",
       "      <td>998</td>\n",
       "      <td>41</td>\n",
       "      <td>5000</td>\n",
       "      <td>2009</td>\n",
       "      <td>2209429.0</td>\n",
       "      <td>5362054.0</td>\n",
       "      <td>2.121717</td>\n",
       "      <td>0.483985</td>\n",
       "      <td>CHE</td>\n",
       "      <td>10111</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>999</th>\n",
       "      <td>999</td>\n",
       "      <td>41</td>\n",
       "      <td>5000</td>\n",
       "      <td>2010</td>\n",
       "      <td>1900903.0</td>\n",
       "      <td>5369947.0</td>\n",
       "      <td>2.140876</td>\n",
       "      <td>0.544375</td>\n",
       "      <td>CHE</td>\n",
       "      <td>10111</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>1000 rows × 10 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "     Unnamed: 0  location_id  product_id  year  export_value  import_value  \\\n",
       "0             0            0        5000  1995       18008.0        7199.0   \n",
       "1             1            0        5000  1996           0.0        3020.0   \n",
       "2             2            0        5000  1997           NaN           NaN   \n",
       "3             3            0        5000  1998           NaN           NaN   \n",
       "4             4            0        5000  1999       14510.0       46679.0   \n",
       "..          ...          ...         ...   ...           ...           ...   \n",
       "995         995           41        5000  2006     1124968.0     2923882.0   \n",
       "996         996           41        5000  2007     2000409.0     5315366.0   \n",
       "997         997           41        5000  2008     2379577.0     7030257.0   \n",
       "998         998           41        5000  2009     2209429.0     5362054.0   \n",
       "999         999           41        5000  2010     1900903.0     5369947.0   \n",
       "\n",
       "       hs_eci    hs_coi location_code  hs_product_code  \n",
       "0   -0.468138 -0.696617           ABW            10111  \n",
       "1   -0.663710 -0.704456           ABW            10111  \n",
       "2   -1.194294 -0.818992           ABW            10111  \n",
       "3    0.199708 -0.704800           ABW            10111  \n",
       "4   -0.083034 -0.801171           ABW            10111  \n",
       "..        ...       ...           ...              ...  \n",
       "995  2.052127  0.536750           CHE            10111  \n",
       "996  2.017949  0.414810           CHE            10111  \n",
       "997  1.974081  0.368396           CHE            10111  \n",
       "998  2.121717  0.483985           CHE            10111  \n",
       "999  2.140876  0.544375           CHE            10111  \n",
       "\n",
       "[1000 rows x 10 columns]"
      ]
     },
     "execution_count": 211,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "%%time\n",
    "df_pd = pd.read_csv(r\"C:\\Users\\IMBS\\Downloads\\programming\\Atlas-Harward\\df1.csv\")\n",
    "df_pd"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 34,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Index(['Unnamed: 0', 'location_id', 'product_id', 'year', 'export_value',\n",
       "       'import_value', 'hs_eci', 'hs_coi', 'location_code', 'hs_product_code'],\n",
       "      dtype='object')"
      ]
     },
     "execution_count": 34,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df_pd.columns"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Method 2, using dask"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 212,
   "metadata": {},
   "outputs": [],
   "source": [
    "import dask.dataframe as dd"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 213,
   "metadata": {},
   "outputs": [],
   "source": [
    "df_dask = dd.read_csv(r\"C:\\Users\\IMBS\\Downloads\\programming\\Atlas-Harward\\df1.csv\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 215,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Wall time: 19.9 ms\n"
     ]
    },
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Unnamed: 0</th>\n",
       "      <th>location_id</th>\n",
       "      <th>product_id</th>\n",
       "      <th>year</th>\n",
       "      <th>export_value</th>\n",
       "      <th>import_value</th>\n",
       "      <th>hs_eci</th>\n",
       "      <th>hs_coi</th>\n",
       "      <th>location_code</th>\n",
       "      <th>hs_product_code</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>5000</td>\n",
       "      <td>1995</td>\n",
       "      <td>18008.0</td>\n",
       "      <td>7199.0</td>\n",
       "      <td>-0.468138</td>\n",
       "      <td>-0.696617</td>\n",
       "      <td>ABW</td>\n",
       "      <td>10111</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>5000</td>\n",
       "      <td>1996</td>\n",
       "      <td>0.0</td>\n",
       "      <td>3020.0</td>\n",
       "      <td>-0.663710</td>\n",
       "      <td>-0.704456</td>\n",
       "      <td>ABW</td>\n",
       "      <td>10111</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>2</td>\n",
       "      <td>0</td>\n",
       "      <td>5000</td>\n",
       "      <td>1997</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>-1.194294</td>\n",
       "      <td>-0.818992</td>\n",
       "      <td>ABW</td>\n",
       "      <td>10111</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>3</td>\n",
       "      <td>0</td>\n",
       "      <td>5000</td>\n",
       "      <td>1998</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>0.199708</td>\n",
       "      <td>-0.704800</td>\n",
       "      <td>ABW</td>\n",
       "      <td>10111</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>4</td>\n",
       "      <td>0</td>\n",
       "      <td>5000</td>\n",
       "      <td>1999</td>\n",
       "      <td>14510.0</td>\n",
       "      <td>46679.0</td>\n",
       "      <td>-0.083034</td>\n",
       "      <td>-0.801171</td>\n",
       "      <td>ABW</td>\n",
       "      <td>10111</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>...</th>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>995</th>\n",
       "      <td>995</td>\n",
       "      <td>41</td>\n",
       "      <td>5000</td>\n",
       "      <td>2006</td>\n",
       "      <td>1124968.0</td>\n",
       "      <td>2923882.0</td>\n",
       "      <td>2.052127</td>\n",
       "      <td>0.536750</td>\n",
       "      <td>CHE</td>\n",
       "      <td>10111</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>996</th>\n",
       "      <td>996</td>\n",
       "      <td>41</td>\n",
       "      <td>5000</td>\n",
       "      <td>2007</td>\n",
       "      <td>2000409.0</td>\n",
       "      <td>5315366.0</td>\n",
       "      <td>2.017949</td>\n",
       "      <td>0.414810</td>\n",
       "      <td>CHE</td>\n",
       "      <td>10111</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>997</th>\n",
       "      <td>997</td>\n",
       "      <td>41</td>\n",
       "      <td>5000</td>\n",
       "      <td>2008</td>\n",
       "      <td>2379577.0</td>\n",
       "      <td>7030257.0</td>\n",
       "      <td>1.974081</td>\n",
       "      <td>0.368396</td>\n",
       "      <td>CHE</td>\n",
       "      <td>10111</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>998</th>\n",
       "      <td>998</td>\n",
       "      <td>41</td>\n",
       "      <td>5000</td>\n",
       "      <td>2009</td>\n",
       "      <td>2209429.0</td>\n",
       "      <td>5362054.0</td>\n",
       "      <td>2.121717</td>\n",
       "      <td>0.483985</td>\n",
       "      <td>CHE</td>\n",
       "      <td>10111</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>999</th>\n",
       "      <td>999</td>\n",
       "      <td>41</td>\n",
       "      <td>5000</td>\n",
       "      <td>2010</td>\n",
       "      <td>1900903.0</td>\n",
       "      <td>5369947.0</td>\n",
       "      <td>2.140876</td>\n",
       "      <td>0.544375</td>\n",
       "      <td>CHE</td>\n",
       "      <td>10111</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>1000 rows × 10 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "     Unnamed: 0  location_id  product_id  year  export_value  import_value  \\\n",
       "0             0            0        5000  1995       18008.0        7199.0   \n",
       "1             1            0        5000  1996           0.0        3020.0   \n",
       "2             2            0        5000  1997           NaN           NaN   \n",
       "3             3            0        5000  1998           NaN           NaN   \n",
       "4             4            0        5000  1999       14510.0       46679.0   \n",
       "..          ...          ...         ...   ...           ...           ...   \n",
       "995         995           41        5000  2006     1124968.0     2923882.0   \n",
       "996         996           41        5000  2007     2000409.0     5315366.0   \n",
       "997         997           41        5000  2008     2379577.0     7030257.0   \n",
       "998         998           41        5000  2009     2209429.0     5362054.0   \n",
       "999         999           41        5000  2010     1900903.0     5369947.0   \n",
       "\n",
       "       hs_eci    hs_coi location_code  hs_product_code  \n",
       "0   -0.468138 -0.696617           ABW            10111  \n",
       "1   -0.663710 -0.704456           ABW            10111  \n",
       "2   -1.194294 -0.818992           ABW            10111  \n",
       "3    0.199708 -0.704800           ABW            10111  \n",
       "4   -0.083034 -0.801171           ABW            10111  \n",
       "..        ...       ...           ...              ...  \n",
       "995  2.052127  0.536750           CHE            10111  \n",
       "996  2.017949  0.414810           CHE            10111  \n",
       "997  1.974081  0.368396           CHE            10111  \n",
       "998  2.121717  0.483985           CHE            10111  \n",
       "999  2.140876  0.544375           CHE            10111  \n",
       "\n",
       "[1000 rows x 10 columns]"
      ]
     },
     "execution_count": 215,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "%%time\n",
    "df_dask.compute()\n",
    "\n",
    "#dask is lazy. If there is enough RAM maybe read csv in chunks with pandas would be better."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 216,
   "metadata": {
    "collapsed": true
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "['_HTML_FMT',\n",
       " '__abs__',\n",
       " '__add__',\n",
       " '__and__',\n",
       " '__array__',\n",
       " '__array_ufunc__',\n",
       " '__array_wrap__',\n",
       " '__await__',\n",
       " '__bool__',\n",
       " '__class__',\n",
       " '__complex__',\n",
       " '__contains__',\n",
       " '__dask_graph__',\n",
       " '__dask_keys__',\n",
       " '__dask_layers__',\n",
       " '__dask_optimize__',\n",
       " '__dask_postcompute__',\n",
       " '__dask_postpersist__',\n",
       " '__dask_scheduler__',\n",
       " '__dask_tokenize__',\n",
       " '__delattr__',\n",
       " '__delitem__',\n",
       " '__dict__',\n",
       " '__dir__',\n",
       " '__doc__',\n",
       " '__eq__',\n",
       " '__float__',\n",
       " '__floordiv__',\n",
       " '__format__',\n",
       " '__ge__',\n",
       " '__getattr__',\n",
       " '__getattribute__',\n",
       " '__getitem__',\n",
       " '__getstate__',\n",
       " '__gt__',\n",
       " '__hash__',\n",
       " '__init__',\n",
       " '__init_subclass__',\n",
       " '__int__',\n",
       " '__invert__',\n",
       " '__iter__',\n",
       " '__le__',\n",
       " '__len__',\n",
       " '__long__',\n",
       " '__lt__',\n",
       " '__mod__',\n",
       " '__module__',\n",
       " '__mul__',\n",
       " '__ne__',\n",
       " '__neg__',\n",
       " '__new__',\n",
       " '__nonzero__',\n",
       " '__or__',\n",
       " '__pow__',\n",
       " '__radd__',\n",
       " '__rand__',\n",
       " '__reduce__',\n",
       " '__reduce_ex__',\n",
       " '__repr__',\n",
       " '__rfloordiv__',\n",
       " '__rmod__',\n",
       " '__rmul__',\n",
       " '__ror__',\n",
       " '__rpow__',\n",
       " '__rsub__',\n",
       " '__rtruediv__',\n",
       " '__rxor__',\n",
       " '__setattr__',\n",
       " '__setitem__',\n",
       " '__setstate__',\n",
       " '__sizeof__',\n",
       " '__slots__',\n",
       " '__str__',\n",
       " '__sub__',\n",
       " '__subclasshook__',\n",
       " '__truediv__',\n",
       " '__weakref__',\n",
       " '__xor__',\n",
       " '_accessors',\n",
       " '_args',\n",
       " '_bind_comparison_method',\n",
       " '_bind_operator',\n",
       " '_bind_operator_method',\n",
       " '_constructor',\n",
       " '_contains_index_name',\n",
       " '_cum_agg',\n",
       " '_describe_1d',\n",
       " '_describe_nonnumeric_1d',\n",
       " '_describe_numeric',\n",
       " '_elemwise',\n",
       " '_get_binary_operator',\n",
       " '_get_numeric_data',\n",
       " '_get_unary_operator',\n",
       " '_head',\n",
       " '_ipython_key_completions_',\n",
       " '_is_column_label_reference',\n",
       " '_is_index_level_reference',\n",
       " '_is_partition_type',\n",
       " '_meta',\n",
       " '_meta_nonempty',\n",
       " '_name',\n",
       " '_partition_type',\n",
       " '_partitions',\n",
       " '_reduction_agg',\n",
       " '_repr_data',\n",
       " '_repr_divisions',\n",
       " '_repr_html_',\n",
       " '_scalarfunc',\n",
       " '_select_columns_or_index',\n",
       " '_token_prefix',\n",
       " '_validate_axis',\n",
       " '_validate_chunks',\n",
       " '_var_1d',\n",
       " '_var_mixed',\n",
       " '_var_numeric',\n",
       " '_var_timedeltas',\n",
       " 'abs',\n",
       " 'add',\n",
       " 'align',\n",
       " 'all',\n",
       " 'any',\n",
       " 'append',\n",
       " 'apply',\n",
       " 'applymap',\n",
       " 'assign',\n",
       " 'astype',\n",
       " 'bfill',\n",
       " 'categorize',\n",
       " 'clear_divisions',\n",
       " 'clip',\n",
       " 'clip_lower',\n",
       " 'clip_upper',\n",
       " 'columns',\n",
       " 'combine',\n",
       " 'combine_first',\n",
       " 'compute',\n",
       " 'copy',\n",
       " 'corr',\n",
       " 'count',\n",
       " 'cov',\n",
       " 'cummax',\n",
       " 'cummin',\n",
       " 'cumprod',\n",
       " 'cumsum',\n",
       " 'dask',\n",
       " 'describe',\n",
       " 'diff',\n",
       " 'div',\n",
       " 'divide',\n",
       " 'divisions',\n",
       " 'drop',\n",
       " 'drop_duplicates',\n",
       " 'dropna',\n",
       " 'dtypes',\n",
       " 'empty',\n",
       " 'eq',\n",
       " 'eval',\n",
       " 'explode',\n",
       " 'export_value',\n",
       " 'ffill',\n",
       " 'fillna',\n",
       " 'first',\n",
       " 'floordiv',\n",
       " 'ge',\n",
       " 'get_dtype_counts',\n",
       " 'get_ftype_counts',\n",
       " 'get_partition',\n",
       " 'groupby',\n",
       " 'gt',\n",
       " 'head',\n",
       " 'hs_coi',\n",
       " 'hs_eci',\n",
       " 'hs_product_code',\n",
       " 'idxmax',\n",
       " 'idxmin',\n",
       " 'iloc',\n",
       " 'import_value',\n",
       " 'index',\n",
       " 'info',\n",
       " 'isin',\n",
       " 'isna',\n",
       " 'isnull',\n",
       " 'items',\n",
       " 'iterrows',\n",
       " 'itertuples',\n",
       " 'join',\n",
       " 'known_divisions',\n",
       " 'last',\n",
       " 'le',\n",
       " 'loc',\n",
       " 'location_code',\n",
       " 'location_id',\n",
       " 'lt',\n",
       " 'map_overlap',\n",
       " 'map_partitions',\n",
       " 'mask',\n",
       " 'max',\n",
       " 'mean',\n",
       " 'melt',\n",
       " 'memory_usage',\n",
       " 'memory_usage_per_partition',\n",
       " 'merge',\n",
       " 'min',\n",
       " 'mod',\n",
       " 'mode',\n",
       " 'mul',\n",
       " 'ndim',\n",
       " 'ne',\n",
       " 'nlargest',\n",
       " 'notnull',\n",
       " 'npartitions',\n",
       " 'nsmallest',\n",
       " 'nunique_approx',\n",
       " 'partitions',\n",
       " 'persist',\n",
       " 'pipe',\n",
       " 'pivot_table',\n",
       " 'pop',\n",
       " 'pow',\n",
       " 'prod',\n",
       " 'product_id',\n",
       " 'quantile',\n",
       " 'query',\n",
       " 'radd',\n",
       " 'random_split',\n",
       " 'rdiv',\n",
       " 'reduction',\n",
       " 'rename',\n",
       " 'repartition',\n",
       " 'replace',\n",
       " 'resample',\n",
       " 'reset_index',\n",
       " 'rfloordiv',\n",
       " 'rmod',\n",
       " 'rmul',\n",
       " 'rolling',\n",
       " 'round',\n",
       " 'rpow',\n",
       " 'rsub',\n",
       " 'rtruediv',\n",
       " 'sample',\n",
       " 'select_dtypes',\n",
       " 'sem',\n",
       " 'set_index',\n",
       " 'shape',\n",
       " 'shift',\n",
       " 'shuffle',\n",
       " 'size',\n",
       " 'squeeze',\n",
       " 'std',\n",
       " 'sub',\n",
       " 'sum',\n",
       " 'tail',\n",
       " 'to_bag',\n",
       " 'to_csv',\n",
       " 'to_dask_array',\n",
       " 'to_delayed',\n",
       " 'to_hdf',\n",
       " 'to_html',\n",
       " 'to_json',\n",
       " 'to_parquet',\n",
       " 'to_records',\n",
       " 'to_sql',\n",
       " 'to_string',\n",
       " 'to_timestamp',\n",
       " 'truediv',\n",
       " 'values',\n",
       " 'var',\n",
       " 'visualize',\n",
       " 'where',\n",
       " 'year']"
      ]
     },
     "execution_count": 216,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "#functions that can be used with dask\n",
    "dir(df_dask)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 217,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "<class 'dask.dataframe.core.DataFrame'>\n",
      "Columns: 10 entries, Unnamed: 0 to hs_product_code\n",
      "dtypes: object(1), float64(4), int64(5)"
     ]
    }
   ],
   "source": [
    "df_dask.info()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Method 3, using pickle\n",
    "\n",
    "Save it as pickle for faster loading"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 218,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Wall time: 3.99 ms\n"
     ]
    }
   ],
   "source": [
    "%%time\n",
    "df_all = pd.read_csv(r\"C:\\Users\\IMBS\\Downloads\\programming\\Atlas-Harward\\df1.csv\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 220,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Save as Pickle\n",
    "df_all.to_pickle(\"newdataset.pkl\")"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Reload it and utilize it"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 221,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Wall time: 3.99 ms\n"
     ]
    }
   ],
   "source": [
    "%%time\n",
    "new_df = pd.read_pickle(\"newdataset.pkl\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "new_df"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Working with YAML"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "import yaml"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 54,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Overwriting file2.yaml\n"
     ]
    }
   ],
   "source": [
    "%%writefile file2.yaml\n",
    "file_type: csv\n",
    "file_name: df1\n",
    "skip_leading_rows: 1\n",
    "columns: \n",
    "    ['location_id', 'product_id', 'year', 'export_value',\n",
    "       'import_value', 'hs_eci', 'hs_coi', 'location_code', 'hs_product_code']\n",
    "\n",
    "    # this creates a yaml file in the path directory"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Creating a pipeline using yaml file to fulfil some preprocesses"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 222,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Overwriting modification.py\n"
     ]
    }
   ],
   "source": [
    "%%writefile modification.py\n",
    "import logging\n",
    "import os\n",
    "import subprocess\n",
    "import yaml\n",
    "import pandas as pd\n",
    "import datetime \n",
    "import gc\n",
    "import re\n",
    "\n",
    "# File Reading #\n",
    "def read_config_file(filepath):\n",
    "    with open(filepath, 'r') as stream:\n",
    "        try:\n",
    "            return yaml.safe_load(stream)\n",
    "        except yaml.YAMLError as exc:\n",
    "            logging.error(exc)\n",
    "            \n",
    "def col_header_val(df,table_config):\n",
    "    '''\n",
    "    replace whitespaces in the column\n",
    "    and standardized column names\n",
    "    '''\n",
    "    df.columns = df.columns.str.lower()\n",
    "    df.columns = df.columns.str.replace('[^\\w]','_',regex=True)\n",
    "    df.columns = list(map(lambda x: x.strip('_'), list(df.columns)))\n",
    "    df.columns = list(map(lambda x: replacer(x,'_'), list(df.columns)))\n",
    "    expected_col = list(map(lambda x: x.lower(),  table_config['columns']))\n",
    "    expected_col.sort()\n",
    "    df.columns =list(map(lambda x: x.lower(), list(df.columns)))\n",
    "    df = df.reindex(sorted(df.columns), axis=1)\n",
    "    if len(df.columns) == len(expected_col) and list(expected_col)  == list(df.columns):\n",
    "        print(\"column name and column length validation passed\")\n",
    "        return 1\n",
    "    else:\n",
    "        print(\"column name and column length validation failed\")\n",
    "        mismatched_columns_file = list(set(df.columns).difference(expected_col))\n",
    "        print(\"Following File columns are not in the YAML file\",mismatched_columns_file)\n",
    "        missing_YAML_file = list(set(expected_col).difference(df.columns))\n",
    "        print(\"Following YAML columns are not in the file uploaded\",missing_YAML_file)\n",
    "        logging.info(f'df columns: {df.columns}')\n",
    "        logging.info(f'expected columns: {expected_col}')\n",
    "        return 0\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 224,
   "metadata": {},
   "outputs": [],
   "source": [
    "import modification as mod\n",
    "config_data = mod.read_config_file(\"file2.yaml\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 225,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "{'file_type': 'csv',\n",
       " 'file_name': 'df1',\n",
       " 'skip_leading_rows': 1,\n",
       " 'columns': ['location_id',\n",
       "  'product_id',\n",
       "  'year',\n",
       "  'export_value',\n",
       "  'import_value',\n",
       "  'hs_eci',\n",
       "  'hs_coi',\n",
       "  'location_code',\n",
       "  'hs_product_code']}"
      ]
     },
     "execution_count": 225,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "config_data"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 114,
   "metadata": {
    "scrolled": true
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "['location_id',\n",
       " 'product_id',\n",
       " 'year',\n",
       " 'export_value',\n",
       " 'import_value',\n",
       " 'hs_eci',\n",
       " 'hs_coi',\n",
       " 'location_code',\n",
       " 'hs_product_code']"
      ]
     },
     "execution_count": 114,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "config_data['columns']"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 227,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Unnamed: 0</th>\n",
       "      <th>location_id</th>\n",
       "      <th>product_id</th>\n",
       "      <th>year</th>\n",
       "      <th>export_value</th>\n",
       "      <th>import_value</th>\n",
       "      <th>hs_eci</th>\n",
       "      <th>hs_coi</th>\n",
       "      <th>location_code</th>\n",
       "      <th>hs_product_code</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>5000</td>\n",
       "      <td>1995</td>\n",
       "      <td>18008.0</td>\n",
       "      <td>7199.0</td>\n",
       "      <td>-0.468138</td>\n",
       "      <td>-0.696617</td>\n",
       "      <td>ABW</td>\n",
       "      <td>10111</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>5000</td>\n",
       "      <td>1996</td>\n",
       "      <td>0.0</td>\n",
       "      <td>3020.0</td>\n",
       "      <td>-0.663710</td>\n",
       "      <td>-0.704456</td>\n",
       "      <td>ABW</td>\n",
       "      <td>10111</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>2</td>\n",
       "      <td>0</td>\n",
       "      <td>5000</td>\n",
       "      <td>1997</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>-1.194294</td>\n",
       "      <td>-0.818992</td>\n",
       "      <td>ABW</td>\n",
       "      <td>10111</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>3</td>\n",
       "      <td>0</td>\n",
       "      <td>5000</td>\n",
       "      <td>1998</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>0.199708</td>\n",
       "      <td>-0.704800</td>\n",
       "      <td>ABW</td>\n",
       "      <td>10111</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>4</td>\n",
       "      <td>0</td>\n",
       "      <td>5000</td>\n",
       "      <td>1999</td>\n",
       "      <td>14510.0</td>\n",
       "      <td>46679.0</td>\n",
       "      <td>-0.083034</td>\n",
       "      <td>-0.801171</td>\n",
       "      <td>ABW</td>\n",
       "      <td>10111</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "   Unnamed: 0  location_id  product_id  year  export_value  import_value  \\\n",
       "0           0            0        5000  1995       18008.0        7199.0   \n",
       "1           1            0        5000  1996           0.0        3020.0   \n",
       "2           2            0        5000  1997           NaN           NaN   \n",
       "3           3            0        5000  1998           NaN           NaN   \n",
       "4           4            0        5000  1999       14510.0       46679.0   \n",
       "\n",
       "     hs_eci    hs_coi location_code  hs_product_code  \n",
       "0 -0.468138 -0.696617           ABW            10111  \n",
       "1 -0.663710 -0.704456           ABW            10111  \n",
       "2 -1.194294 -0.818992           ABW            10111  \n",
       "3  0.199708 -0.704800           ABW            10111  \n",
       "4 -0.083034 -0.801171           ABW            10111  "
      ]
     },
     "execution_count": 227,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# read the csv file using yaml config file\n",
    "\n",
    "import pandas as pd \n",
    "\n",
    "file_type = config_data['file_type']\n",
    "source_file = \"./\" + config_data['file_name'] + f'.{file_type}'\n",
    "#print(\"\",source_file)\n",
    "df = pd.read_csv(source_file)\n",
    "df.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 63,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "columns of files are: Index(['Unnamed: 0', 'location_id', 'product_id', 'year', 'export_value',\n",
      "       'import_value', 'hs_eci', 'hs_coi', 'location_code', 'hs_product_code'],\n",
      "      dtype='object')\n",
      "columns of YAML are: ['location_id', 'product_id', 'year', 'export_value', 'import_value', 'hs_eci', 'hs_coi', 'location_code', 'hs_product_code']\n"
     ]
    }
   ],
   "source": [
    "# yaml results are more readble\n",
    "\n",
    "print(\"columns of files are:\" ,df.columns)\n",
    "print(\"columns of YAML are:\" ,config_data['columns'])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 112,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "column name and column length validation failed\n",
      "Following File columns are not in the YAML file ['unnamed_0']\n",
      "Following YAML columns are not in the file uploaded []\n"
     ]
    },
    {
     "data": {
      "text/plain": [
       "0"
      ]
     },
     "execution_count": 112,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "#validate the header of the file\n",
    "\n",
    "\n",
    "util.col_header_val(df,config_data)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "metadata": {},
   "outputs": [],
   "source": [
    "# compress as a test gz format\n",
    "\n",
    "import gzip\n",
    "import shutil\n",
    "import csv\n",
    "with open(\"df1.txt\", 'rb') as inpute:\n",
    "    \n",
    "    with gzip.open(\"df1.txt.gz\", 'wb') as output:\n",
    "        shutil.copyfileobj(inpute,output)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": 191,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "df1.txt.gz contain 1001 lines\n",
      "file size of df1.txt.gz is 20534\n"
     ]
    }
   ],
   "source": [
    "import os\n",
    "\n",
    "myfile = r\"C:\\Users\\IMBS\\Downloads\\programming\\Atlas-Harward\\df1.txt.gz\"\n",
    "\n",
    "with gzip.open(myfile, 'rb') as f:\n",
    "        for i, l in enumerate(f):\n",
    "            pass\n",
    "        print(\"df1.txt.gz contain {0} lines\".format(i + 1, myfile))\n",
    "        \n",
    "        print(\"file size of df1.txt.gz is\", os.stat(r\"C:\\Users\\IMBS\\Downloads\\programming\\Atlas-Harward\\df1.txt.gz\").st_size)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.8.5"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 4
}
